// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.35.2
// 	protoc        v5.28.3
// source: proto/types/http.proto

package types

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// POKTHTTPRequest represents an http.Request to be serialized and sent to a RelayMiner
// by an Application/Gateway client within a RelayRequest payload.
type POKTHTTPRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// method is the HTTP method/verb of the request. If it is a RESTful API, it
	// will be one of the following: GET, POST, PUT, DELETE, PATCH, OPTIONS, HEAD.
	// If it is a JSON-RPC API, it will be POST.
	Method string `protobuf:"bytes,1,opt,name=method,proto3" json:"method,omitempty"`
	// header is a map of keys to multiple values belonging to the same key used
	// to group headers together, This is to avoid creating a new message type
	// that represents a single header key-values messages. Since protobuf does not
	// support `map<string, repeated string>`.
	Header map[string]*Header `protobuf:"bytes,2,rep,name=header,proto3" json:"header,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// url is the URL of the request. It is a string that represents the request's
	// URL with all its components (scheme, host, path, query, fragment).
	Url string `protobuf:"bytes,3,opt,name=url,proto3" json:"url,omitempty"`
	// body_bz is the body of the request in bytes. POKTHTTPRequest mimics
	// http.request with the difference that the body is a byte slice instead of
	// an io.readcloser, this is to avoid reading the io.readcloser each time
	// the body is needed.
	BodyBz []byte `protobuf:"bytes,4,opt,name=body_bz,json=bodyBz,proto3" json:"body_bz,omitempty"`
}

func (x *POKTHTTPRequest) Reset() {
	*x = POKTHTTPRequest{}
	mi := &file_proto_types_http_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *POKTHTTPRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*POKTHTTPRequest) ProtoMessage() {}

func (x *POKTHTTPRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_types_http_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use POKTHTTPRequest.ProtoReflect.Descriptor instead.
func (*POKTHTTPRequest) Descriptor() ([]byte, []int) {
	return file_proto_types_http_proto_rawDescGZIP(), []int{0}
}

func (x *POKTHTTPRequest) GetMethod() string {
	if x != nil {
		return x.Method
	}
	return ""
}

func (x *POKTHTTPRequest) GetHeader() map[string]*Header {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *POKTHTTPRequest) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *POKTHTTPRequest) GetBodyBz() []byte {
	if x != nil {
		return x.BodyBz
	}
	return nil
}

// POKTHTTPResponse represents an http.Response to be serialized and sent by a RelayMiner
// back to the Application/Gateway client within a RelayResponse payload.
type POKTHTTPResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// status_code is the HTTP status code of the response. If it is a RESTful API,
	// it will be one of the following: 200, 201, 204, 400, 401, 403, 404, 500.
	// If it is a JSON-RPC API, the status code will be 200 and any error will be
	// in the body of the response.
	StatusCode uint32 `protobuf:"varint,1,opt,name=status_code,json=statusCode,proto3" json:"status_code,omitempty"`
	// header is a map of keys to multiple values belonging to the same key used
	// to group headers together, This is to avoid creating a new message type
	// that represents a header key-values message. Since protobuf does not
	// support `map<string, repeated string>`.
	Header map[string]*Header `protobuf:"bytes,2,rep,name=header,proto3" json:"header,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// body_bz is the body of the request in bytes. POKTHTTPResponse mimics
	// http.request with the difference that the body is a byte slice instead of
	// an io.readcloser, this is to avoid reading the io.readcloser each time
	// the body is needed.
	BodyBz []byte `protobuf:"bytes,3,opt,name=body_bz,json=bodyBz,proto3" json:"body_bz,omitempty"`
}

func (x *POKTHTTPResponse) Reset() {
	*x = POKTHTTPResponse{}
	mi := &file_proto_types_http_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *POKTHTTPResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*POKTHTTPResponse) ProtoMessage() {}

func (x *POKTHTTPResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_types_http_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use POKTHTTPResponse.ProtoReflect.Descriptor instead.
func (*POKTHTTPResponse) Descriptor() ([]byte, []int) {
	return file_proto_types_http_proto_rawDescGZIP(), []int{1}
}

func (x *POKTHTTPResponse) GetStatusCode() uint32 {
	if x != nil {
		return x.StatusCode
	}
	return 0
}

func (x *POKTHTTPResponse) GetHeader() map[string]*Header {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *POKTHTTPResponse) GetBodyBz() []byte {
	if x != nil {
		return x.BodyBz
	}
	return nil
}

// Header represents a single header key-values message.
// Since protobuf does not support map<string, repeated string>, we use this
// message to accurately represent a single http.Header key which could have multiple
// values.
type Header struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The key of the header.
	Key string `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	// The values associated with the header key.
	Values []string `protobuf:"bytes,2,rep,name=values,proto3" json:"values,omitempty"`
}

func (x *Header) Reset() {
	*x = Header{}
	mi := &file_proto_types_http_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Header) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Header) ProtoMessage() {}

func (x *Header) ProtoReflect() protoreflect.Message {
	mi := &file_proto_types_http_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Header.ProtoReflect.Descriptor instead.
func (*Header) Descriptor() ([]byte, []int) {
	return file_proto_types_http_proto_rawDescGZIP(), []int{2}
}

func (x *Header) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *Header) GetValues() []string {
	if x != nil {
		return x.Values
	}
	return nil
}

var File_proto_types_http_proto protoreflect.FileDescriptor

var file_proto_types_http_proto_rawDesc = []byte{
	0x0a, 0x16, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2f, 0x68, 0x74,
	0x74, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x09, 0x73, 0x64, 0x6b, 0x2e, 0x74, 0x79,
	0x70, 0x65, 0x73, 0x22, 0xe2, 0x01, 0x0a, 0x0f, 0x50, 0x4f, 0x4b, 0x54, 0x48, 0x54, 0x54, 0x50,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x65, 0x74, 0x68, 0x6f,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x12,
	0x3e, 0x0a, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x26, 0x2e, 0x73, 0x64, 0x6b, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x50, 0x4f, 0x4b, 0x54,
	0x48, 0x54, 0x54, 0x50, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x48, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12,
	0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72,
	0x6c, 0x12, 0x17, 0x0a, 0x07, 0x62, 0x6f, 0x64, 0x79, 0x5f, 0x62, 0x7a, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x06, 0x62, 0x6f, 0x64, 0x79, 0x42, 0x7a, 0x1a, 0x4c, 0x0a, 0x0b, 0x48, 0x65,
	0x61, 0x64, 0x65, 0x72, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x27, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x73, 0x64, 0x6b,
	0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xdb, 0x01, 0x0a, 0x10, 0x50, 0x4f, 0x4b,
	0x54, 0x48, 0x54, 0x54, 0x50, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1f, 0x0a,
	0x0b, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x3f,
	0x0a, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27,
	0x2e, 0x73, 0x64, 0x6b, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x50, 0x4f, 0x4b, 0x54, 0x48,
	0x54, 0x54, 0x50, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x48, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12,
	0x17, 0x0a, 0x07, 0x62, 0x6f, 0x64, 0x79, 0x5f, 0x62, 0x7a, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x06, 0x62, 0x6f, 0x64, 0x79, 0x42, 0x7a, 0x1a, 0x4c, 0x0a, 0x0b, 0x48, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x27, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x73, 0x64, 0x6b, 0x2e, 0x74,
	0x79, 0x70, 0x65, 0x73, 0x2e, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x32, 0x0a, 0x06, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x42, 0x2b, 0x5a, 0x29, 0x67, 0x69,
	0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x70, 0x6f, 0x6b, 0x74, 0x2d, 0x6e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2f, 0x73, 0x68, 0x61, 0x6e, 0x6e, 0x6f, 0x6e, 0x2d, 0x73, 0x64,
	0x6b, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_proto_types_http_proto_rawDescOnce sync.Once
	file_proto_types_http_proto_rawDescData = file_proto_types_http_proto_rawDesc
)

func file_proto_types_http_proto_rawDescGZIP() []byte {
	file_proto_types_http_proto_rawDescOnce.Do(func() {
		file_proto_types_http_proto_rawDescData = protoimpl.X.CompressGZIP(file_proto_types_http_proto_rawDescData)
	})
	return file_proto_types_http_proto_rawDescData
}

var file_proto_types_http_proto_msgTypes = make([]protoimpl.MessageInfo, 5)
var file_proto_types_http_proto_goTypes = []any{
	(*POKTHTTPRequest)(nil),  // 0: sdk.types.POKTHTTPRequest
	(*POKTHTTPResponse)(nil), // 1: sdk.types.POKTHTTPResponse
	(*Header)(nil),           // 2: sdk.types.Header
	nil,                      // 3: sdk.types.POKTHTTPRequest.HeaderEntry
	nil,                      // 4: sdk.types.POKTHTTPResponse.HeaderEntry
}
var file_proto_types_http_proto_depIdxs = []int32{
	3, // 0: sdk.types.POKTHTTPRequest.header:type_name -> sdk.types.POKTHTTPRequest.HeaderEntry
	4, // 1: sdk.types.POKTHTTPResponse.header:type_name -> sdk.types.POKTHTTPResponse.HeaderEntry
	2, // 2: sdk.types.POKTHTTPRequest.HeaderEntry.value:type_name -> sdk.types.Header
	2, // 3: sdk.types.POKTHTTPResponse.HeaderEntry.value:type_name -> sdk.types.Header
	4, // [4:4] is the sub-list for method output_type
	4, // [4:4] is the sub-list for method input_type
	4, // [4:4] is the sub-list for extension type_name
	4, // [4:4] is the sub-list for extension extendee
	0, // [0:4] is the sub-list for field type_name
}

func init() { file_proto_types_http_proto_init() }
func file_proto_types_http_proto_init() {
	if File_proto_types_http_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_proto_types_http_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   5,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_proto_types_http_proto_goTypes,
		DependencyIndexes: file_proto_types_http_proto_depIdxs,
		MessageInfos:      file_proto_types_http_proto_msgTypes,
	}.Build()
	File_proto_types_http_proto = out.File
	file_proto_types_http_proto_rawDesc = nil
	file_proto_types_http_proto_goTypes = nil
	file_proto_types_http_proto_depIdxs = nil
}
